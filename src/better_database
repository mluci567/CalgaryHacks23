from flask import Flask, render_template
import sqlite3 as sql
import openpyxl
import threading
from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, BooleanField, SelectField
from sqlalchemy import create_engine, Column, Integer, String, Boolean
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
import requests
import json
# import wtforms.validators as w 

#create database 
database = sql.connect('./database/database.db', check_same_thread=False)
app = Flask(__name__)

class RoomForm(FlaskForm):
    # used to add new room to database (see add_room)
    room = StringField('Room')  # there should be validation here but I was too annoyed to make it work 
    floor = SelectField('Floor', choices=[('1', '1'),('2','2'),('3','3'),('4','4')])
    type_ = SelectField('Type', choices=[('Group Room', 'Group Room'), ('Audio Prod.', 'Audio Prod.'), ('Presentation', 'Presentation')])
    capacity = IntegerField('Capacity')
    hours = StringField('Hours')
    accessibility = IntegerField('Accessibility') # SelectField('Accessibility, choices=[('Accessible', 'Accessible'),('Less Accessible', 'Less Accessible'),('Not Accessible', 'Not Accessible')])
    noise = IntegerField('Noise')  # SelectField ('Noise', choices=[('Quiet', 'Quiet'), ('Moderate', 'Moderate'), ('Loud', 'Loud')])
    lighting = SelectField('Lighting', choices = [('T','T'),('F','F')]) # [('Adjustable', 'Adjustable'), ('Not adjustable', 'Not adjustable')])
    whiteboard = SelectField('Whiteboard', choices = [('T','T'),('F','F')])
    outlets = SelectField('Outlets', choices =[('4', '4'), ('8', '8'), ('10','10')])
    food = SelectField('Food', choices = [('T','T'),('F','F')]) # [('Accessible', 'Accessible'),('Less Accessible', 'Less Accessible'),('Not Accessible', 'Not Accessible')])
    washroom = SelectField('Washroom', choices = [('T','T'),('F','F')]) # [('Accessible', 'Accessible'),('Less Accessible', 'Less Accessible'),('Not Accessible', 'Not Accessible')])
    parking = SelectField('Parking', choices = [('T','T'),('F','F')]) # [('Accessible', 'Accessible'),('Less Accessible', 'Less Accessible'),('Not Accessible', 'Not Accessible')])
    transit = SelectField('Transit', choices = [('T','T'),('F','F')]) # [('Accessible', 'Accessible'),('Less Accessible', 'Less Accessible'),('Not Accessible', 'Not Accessible')])

class ClassForm(FlaskForm): 
    # used to add new class to database (see add_class)
    subject = StringField('Subject')  # again there should be validation here but I was still too annoyed to make it work
    course_number = StringField('Course Number')
    section = IntegerField('Section')
    crn = IntegerField('CRN')
    course_title = StringField('Course Title')

class GroupForm(FlaskForm):
    # used to add new group to database (see add_group)
    name = StringField('Group Name')
    subject = StringField('Subject')
    course = StringField('Course')
    meet_time = StringField('Meet Time')
    is_recurring = BooleanField('Is recurring meeting')
    max_size = IntegerField('Maximum Group Size')
    purpose = StringField('Group Goal Description')
    room = StringField('Meeting Space')

def get_data(spreadsheet_info):
    # read in excel sheets to database 
    for file_name, table_name in spreadsheet_info:
        workbook = openpyxl.load_workbook(file_name)
        worksheet = workbook.worksheets[0]
        headers = [cell.value for cell in worksheet[1]]
        column_names = ', '.join(headers)
        placeholders = ', '.join('?' * len(headers))
        create_table_query = f"CREATE TABLE IF NOT EXISTS {table_name} ({column_names})"
        database.execute(create_table_query)
        for row in worksheet.iter_rows(min_row=2, values_only=True):
            insert_query = f"INSERT INTO {table_name} ({column_names}) VALUES ({placeholders})"
            database.execute(insert_query, row)
        database.commit()  
    database.close
    return 'database fill complete'

@app.route('/')
def load():
    # read room and class data ? 
    spreadsheet_info = [('./database/ROOM_CHARACTERISTICS.xlsx', 'rooms'), ('./database/CLASS_INFO.xlsx', 'classes'), ('./database/GROUP_INFO.xlsx', 'groups')]
    t = threading.Thread(target=get_data, args=(spreadsheet_info,))
    t.start()
    return 'data loaded'

@app.route('/data')
def data():
    # apply database to template for web 
    rooms = database.execute('SELECT * FROM rooms').fetchall()
    classes = database.execute('SELECT * FROM classes').fetchall()  
    groups = database.execute('SELECT * FROM groups').fetchall()
    return render_template('./database/template.html', rooms=rooms, classes=classes, groups=groups)

@app.route('/add_room', methods=['GET', 'POST'])
def add_room():
    # add new room to database 
    form = RoomForm()
    if form.validate_on_submit():
        room = form.room.data
        floor = form.floor.data
        type_ = form.type_.data # Updated variable name to avoid conflict with built-in function
        capacity = form.capacity.data
        hours = form.hours.data
        accessibility = form.accessibility.data
        noise = form.noise.data
        lighting = form.lighting.data
        whiteboard = form.whiteboard.data
        outlets = form.outlets.data
        food = form.food.data
        washroom = form.washroom.data
        parking = form.parking.data
        transit = form.transit.data
        insert_query = "INSERT INTO rooms VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
        database.execute(insert_query, (room, capacity, type_, floor, hours, accessibility, noise, lighting, whiteboard, outlets, food, washroom, parking, transit))
        database.commit()
        
        return 

@app.route('/add_class', methods=['GET', 'POST'])
def add_class():
    # add new class to database 
    form = ClassForm() 
    if form.validate_on_submit(): 
        subject = form.subject.data
        course_number = form.course_number.data
        section = form.section.data
        crn = form.crn.data
        course_title = form.course_title.data
        insert_query = "INSERT INTO classes VALUES (?,?,?,?,?)"
        database.execute(insert_query (subject, course_number, section, crn, course_title))
        database.commit()
    return 

@app.route('/add_group', methods=['GET', 'POST'])
def add_group():
    #add new group to database
    form = GroupForm()
    if form.validate_on_submit():
        name = form.name.data
        subject = form.subject.data
        course = form.course.data
        meet_time = form.meet_time.data
        is_recurring = form.is_recurring.data
        max_size = form.max_size.data 
        purpose = form.purpose.data
        room = form.room.data
        insert_query = "INSERT INTO groups VALUES (?,?,?,?,?,?,?,?)"
        database.execute(insert_query(name, subject, course, meet_time, is_recurring, max_size, purpose, room))
        database.commit()
    return

# database connection
engine = create_engine('sqlite:///./database/database.db', echo=True)
Base = declarative_base()
Session = sessionmaker(bind=engine)

class RoomItem(Base):
    #item for room database
    __tablename__ = 'rooms'
    room = Column(String, primary_key=True)
    floor = Column(Integer)
    type_ = Column(String)
    capacity = Column(Integer)
    hours = Column(String)
    accessibility = Column(Boolean)
    noise = Column(Integer)
    lighting = Column(Boolean)
    whiteboard = Column(Boolean)
    outlets = Column(Integer)
    food = Column(Boolean)
    washroom = Column(Boolean)
    parking = Column(Boolean)
    transit = Column(Boolean)

    def __repr__(self):
        return f"<Item(room={self.room}, floor='{self.floor}', type_={self.type_}, capacity={self.capacity}, hours={self.hours}, accessibility={self.accessibility}, noise={self.noise}, lighting={self.lighting}, whiteboard={self.whiteboard}, outlets={self.outlets}, food={self.food}, washroom={self.washroom}, parking={self.parking}, transit={self.transit})>"

class ClassItem(Base):
    #item for class database
    __tablename__ = 'classes'
    subject = Column(String, primary_key=True)
    course_number = Column(Integer)
    section = Column(Integer)
    crn = Column(Integer)
    course_title = Column(String)

    def __repr__(self):
        return f"<Item(subject={self.subject}, course_number={self.course_number}, section={self.section}, crn={self.crn}, course_title={self.course_title})>"

class GroupItem(Base):
    #item for group database
    __tablename__ = 'groups'
    name = Column(String, primary_key=True)
    subject = Column(String)
    course = Column(String)
    meet_time = Column(String)
    is_recurring = Column(Boolean)
    max_size = Column(Integer)
    purpose = Column(String)
    room = Column(String)

    def __repr__(self):
        return f"<Item(name={self.name}, subject={self.subject}, course={self.course}, meet_time={self.meet_time}, is_recurring={self.is_recurring}, max_size={self.max_size}, purpose={self.purpose}, room={self.room})>"

def sort_classes():
    #sort classes by subject, course number and section
    session = Session() # define session 
    results = session.query(ClassItem).filter(ClassItem.subject, ClassItem.section, ClassItem.course_number, ClassItem.course_title, ClassItem.crn).order_by(ClassItem.course_number).all() 
    session.close()
    return results

def sort_rooms():
    #sort rooms by all attributes
    session = Session()
    result = session.query(RoomItem).filter(RoomItem.floor, RoomItem.room, RoomItem.type_, RoomItem.capacity, RoomItem.hours, RoomItem.accessibility, RoomItem.noise, RoomItem.lighting, RoomItem.whiteboard, RoomItem.outlets, RoomItem.food, RoomItem.washroom, RoomItem.parking, RoomItem.transit).order_by(RoomItem.floor).all() 
    session.close()

    return result 

def sort_groups():
    #sort groups by all attributes
    session = Session()
    result = session.query(GroupItem.name, GroupItem.subject, GroupItem.course, GroupItem.meet_time, GroupItem.is_recurring, GroupItem.max_size, GroupItem.purpose, GroupItem.room)
    session.close()
    return result

def print_rooms():
    #print rooms in database on url ??
    with Session() as session:
        rooms = session.query(RoomItem).all()

    data = [room.to_dict() for room in rooms]
    json_data = json.dumps(data)

    print(json_data)

    # Send an HTTP POST request to the server hosting the URL
    url = '/items' #http://localhost:3000/
    headers = {'Content-type': 'application/json'}
    response = requests.post(url, headers=headers, data=json_data)

    if response.status_code == 200:
        print('Data posted successfully.')
    else:
        print(f'Error posting data: {response.content}')
    return 

if __name__ == '__main__':
    app.run(debug=True)
